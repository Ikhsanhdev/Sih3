function initMap() {
    // Lokasi awal (contoh: Jakarta)
    const jakarta = { lat: 0.5, lng: 110 };

    // Inisialisasi peta
    const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 8,
        center: jakarta,
        gestureHandling: 'greedy', // Mengizinkan zoom menggunakan scroll
        // mapTypeId: google.maps.MapTypeId.HYBRID,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            position: google.maps.ControlPosition.BOTTOM_LEFT // Pindahkan ke bawah kiri
        },
        styles: [
            {
                featureType: "administrative.locality", // Nama kota
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            },
            {
                featureType: "administrative.neighborhood", // Nama kelurahan
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            },
            {
                featureType: "poi", // Tempat umum
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            },
            {
                featureType: "road",
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            },
            {
                featureType: "transit",
                elementType: "labels",
                stylers: [{ visibility: "off" }]
            },
            {
                featureType: "administrative.province", // Nama provinsi
                elementType: "labels",
                stylers: [{ visibility: "on" }]
            }
        ]
    });

    const geocoder = new google.maps.Geocoder();
    geocoder.geocode({ location: jakarta }, (results, status) => {
        if (status === "OK" && results[0]) {
            let province = '';
            for (const component of results[0].address_components) {
                if (component.types.includes("administrative_area_level_1")) {
                    province = component.long_name;
                    break;
                }
            }

            const infowindow = new google.maps.InfoWindow({
                content: `<strong>${province}</strong>`,
            });
            infowindow.open(map);
        }
    });
}

$(document).ready(function() {
    loadAwlrLastReading();
});

function loadAwlrLastReading() {
    getData(`/Home/GetAwlrLastReading`).then(res => {
        console.log("Respon API:", res);
        let result = res;

        if (result && result.metaData?.code === 200) {
            $.each(result.response, function (key, awlr_last_reading) {
                var contentStation = loadContentAwlrLastReading(awlr_last_reading);
                if($(`#card-station-${awlr_last_reading.id}`).length) {
                    $(`#card-station-${awlr_last_reading.id}`).html(contentStation);
                } else {
                    $('#awlr-body .accordion-body').append(`
                        <div class="card-station-awlr" data-ts-id="${awlr_last_reading.id}" id="card-station-${awlr_last_reading.id}" data-last-update="${(awlr_last_reading.reading_at == null) ? '' : moment(awlr_last_reading.reading_at).locale('id').format('YYYY-MM-DD HH:mm:ss')}">
                            ${contentStation}
                        </div>
                    `);
                }

                if(awlr_last_reading.latitude != null && awlr_last_reading.longitude != null) {
                    // var customIcon = L.divIcon({ 
                    //     iconSize: new L.Point(40, 20), 
                    //     iconAnchor: new L.Point(20, 20), 
                    //     html:  `<div class="ts-marker-wrapper"><a href="javascript:void(0)" class="ts-marker ts-awlr" data-ts-id="64" data-ts-ln="60" style="outline: none;"><div class="ts-marker__title">${awlr_last_reading.name}</div><image src="/images/awlr-icon1.png" height="30" /></a></div>`}
                    // );

                    // var stationMarker = L.marker([awlr_last_reading.latitude, awlr_last_reading.longitude], {
                    //     icon: customIcon,
                    // }).bindPopup(createDetailPanelStation(awlr_last_reading)).addTo(awlr_marker);

                    // stationMarker.options.id = awlr_last_reading.id;

                    // $('.card-station-awlr[data-ts-id="' + awlr_last_reading.id + '"]').on('click', function () {
                    //     map.setView([awlr_last_reading.latitude, awlr_last_reading.longitude], 12);
                    //     stationMarker.openPopup();
                    // });
                }
            });
            setTimeout(adjustPadding, 100);
        }
    }).catch(err => {
        console.log(err);
    });
}

function loadContentAwlrLastReading(awlr_last_reading) {
    let isOnline = false;
    let device_status = `<small class="mdi mdi-circle text-danger"></small> Offline`;
    const device_status_class = (device_status === 'Online') ? 'bg-success text-white' : 'bg-secondary text-white';


    if (awlr_last_reading.reading_at != null) {
        var readingAt = moment(awlr_last_reading.reading_at).format('YYYY-MM-DD HH:mm:ss');
        const currentTime = moment(); 
        const diffInHours = currentTime.diff(readingAt, 'hours');

        if (Math.abs(diffInHours) < 12) {
            isOnline = true;
            device_status = '<small class="mdi mdi-circle text-success"></small> Online';
        }
    }

    // Reading
    var wl_elevation_operator = awlr_last_reading.water_level_elevation > 0 ? '+' : '';
    var change_status = '';
    switch (awlr_last_reading.change_status) {
        case 'increase':
            change_status = '<i class="mdi mdi-arrow-up-circle text-danger me-1"></i>';
            break;
        case 'decrease':
            change_status = '<i class="mdi mdi-arrow-down-circle text-success me-1"></i>';
            break;
    }

    // Warning Status
    var class_warning_status = '';
    var warning_status = '-';
    switch (awlr_last_reading.warning_status) {
        case null:
            warning_status = '<span class="badge badge-awlr-nostatus rounded-1 ms-1 align-self-center">TANPA STATUS</span>';
            class_warning_status = 'bg-nostatus';
            break;
        case 'Normal':
            warning_status = '<span class="badge badge-awlr-normal rounded-1 ms-1 align-self-center">NORMAL</span>';
            class_warning_status = 'bg-normal';
            break;
        case 'Waspada':
            warning_status = '<span class="badge badge-awlr-siaga3 rounded-1 ms-1 align-self-center blinking-content">WASPADA</span>';
            class_warning_status = 'bg-siaga3';
            break;
        case 'Siaga':
            warning_status = '<span class="badge badge-awlr-siaga2 rounded-1 ms-1 align-self-center blinking-content">SIAGA</span>';
            class_warning_status = 'bg-siaga2';
            break;
        case 'Awas':
            warning_status = '<span class="badge badge-awlr-siaga1 rounded-1 ms-1 align-self-center blinking-content">AWAS</span>';
            class_warning_status = 'bg-siaga1';
            break;
    }

    if(awlr_last_reading.water_level == null) {
        warning_status = '-';
    }

    var water_level = awlr_last_reading.water_level != null ? ` ${awlr_last_reading.water_level.toFixed(2)} <small>${awlr_last_reading.unit_display}</small></h6>` : '-';
    var water_level_elevation = awlr_last_reading.water_level_elevation != null ? `${wl_elevation_operator}${awlr_last_reading.water_level_elevation} <sup>mdpl</sup>` : '-';

    if(awlr_last_reading.unitSensor == 'cmdpl' || awlr_last_reading.unitSensor == 'mdpl') {
        water_level_elevation = `${awlr_last_reading.water_level_elevation} <sup>mdpl</sup>`;
    }

    var debit = awlr_last_reading.debit != null ? `${awlr_last_reading.debit} <small>m<sup>3</sup>/s</small>` : '-';

    // Level Warning
    var warning_status_bar = '';
    if(awlr_last_reading.siaga1 != null && awlr_last_reading.siaga2 != null && awlr_last_reading.siaga3 != null) {
        warning_status_bar = `
            <div class="progress-meter mt-2 mb-2">
                <div class="meter meter-normal meter-left" style="width: 25%;" title="Normal <br> < 6 m"><span class="fw-normal meter-text" style="color: #4DC27E;">0</span></div>
                <div class="meter meter-waspada meter-left" style="width: 25%;" title="Siaga 3 <br> ${awlr_last_reading.siaga3} ${awlr_last_reading.unit_display} - ${awlr_last_reading.siaga2} ${awlr_last_reading.unit_display}"><span class="fw-normal meter-text" style="color: #FFDA4F;">${awlr_last_reading.siaga3} ${awlr_last_reading.unit_display}</span></div>
                <div class="meter meter-siaga meter-left" style="width: 25%;" title="Siaga 2 <br> ${awlr_last_reading.siaga2} ${awlr_last_reading.unit_display} - ${awlr_last_reading.siaga1} ${awlr_last_reading.unit_display}"><span class="fw-normal meter-text" style="color: #FFA600;">${awlr_last_reading.siaga2} ${awlr_last_reading.unit_display}</span></div>
                <div class="meter meter-awas meter-left" style="width: 25%;" title="Siaga 1 <br> > ${awlr_last_reading.siaga1} ${awlr_last_reading.unit_display}"><span class="fw-normal meter-text" style="color: #EF5350;">${awlr_last_reading.siaga1} ${awlr_last_reading.unit_display}</span></div>
            </div>
        `;
    } else {
        warning_status_bar = `<div class="progress-meter mt-2 mb-2">
            <div class="meter meter-normal meter-left" style="width: 25%;" title="Normal <br> < 6 m"><span class="fw-normal meter-text" style="color: #4DC27E;">0</span></div>
            <div class="meter meter-waspada meter-left" style="width: 25%;" title="Siaga 3 <br> 0 - 0"><span class="fw-normal meter-text" style="color: #FFDA4F;">0</span></div>
            <div class="meter meter-siaga meter-left" style="width: 25%;" title="Siaga 2 <br> 0 - 0"><span class="fw-normal meter-text" style="color: #FFA600;">0</span></div>
            <div class="meter meter-awas meter-left" style="width: 25%;" title="Siaga 1 <br> > 0"><span class="fw-normal meter-text" style="color: #EF5350;">0</span></div>
        </div>`;
    }

    var battery = '';

    if(awlr_last_reading.battery != null) {
        if(awlr_last_reading.battery < 7) {
            battery = `<span><i class="mdi mdi-battery-charging-low ms-1" style="color: #F69696;"></i> ${awlr_last_reading.battery} Volt</span>`;
        } else {
            battery = `<span><i class="mdi mdi-battery-charging-high ms-1" style="color: #F69696;"></i> ${awlr_last_reading.battery} Volt</span>`;
        }
    }

    var reading_at = '';
    if(awlr_last_reading.reading_at != null) {
        const currentDate = moment().format('YYYY-MMM-DD'); 

        if(moment(awlr_last_reading.reading_at).locale('id').format("YYYY-MMM-DD") == currentDate) {
            reading_at = `Hari Ini, <span class="text-muted">${moment(awlr_last_reading.reading_at).format("HH:mm")}</span>`;
        } else {
            reading_at = moment(awlr_last_reading.reading_at).locale('id').format('D MMMM YYYY HH:mm');
        }
    }

    const card_header = `
        <div class="card-header">
            <div class="d-flex align-items-center">
                <h6 class="card-title text-uppercase text-station-name m-0">${awlr_last_reading.name}</h6>
                <span class="reading-at ms-auto">${reading_at}</span>
            </div>
        </div>`;

    // return `
    //     <div class="card-station-awlr" data-ts-id="${awlr_last_reading.id}" id="card-station-awlr-${awlr_last_reading.id}" data-last-update="${(awlr_last_reading.reading_at == null) ? '' : moment(awlr_last_reading.reading_at).locale('id').format('YYYY-MM-DD HH:mm:ss')}">
    //         <div class="card card-station animate__animated animate__fadeInLeft">
    //             ${card_header != null ? card_header : ''}
    //             <div class="card-body">
    //                 <div class="reading-device d-flex align-items-center justify-content-between mb-2">
    //                     <div>
    //                         ${awlr_last_reading.brand_name}
    //                         <span class="badge badge-outline-secondary rounded-1 ms-1" style="color: #A9ABB8;border-color: #A9ABB8;">${awlr_last_reading.device_id}</span>
    //                         ${battery}
    //                     </div>
    //                     <div>${device_status}</div>
    //                 </div>

    //                 <div class="d-flex justify-content-around align-items-center reading-text">
    //                     <div class="col-4 text-center">
    //                         <h4>${water_level}</h4>
    //                     </div>
    //                     <div class="col-4 text-center">
    //                         <h4>${debit}</h4>
    //                     </div>
    //                     <div class="col-4 text-center">
    //                         <h4>${warning_status}</h4>
    //                     </div>
    //                 </div>
    //                 <div class="d-flex justify-content-around reading-text">
    //                     <div class="col-4 text-center">
    //                         Tinggi Muka Air
    //                     </div>
    //                     <div class="col-4 text-center">
    //                         Debit
    //                     </div>
    //                     <div class="col-4 text-center">
    //                         Status
    //                     </div>
    //                 </div>
    //                 ${warning_status_bar}
    //             </div>
    //         </div>
    //     </div>`;

    return `<div class="card-station-awlr">
        <div class="card shadow-sm border-0 rounded-4 overflow-hidden animate__animated animate__fadeInUp" style="background: #f8f9fa;">
            <div class="card-body p-3">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div class="d-flex flex-column">
                        <strong class="fs-8">${awlr_last_reading.name}</strong>
                        <span class="text-muted small">${awlr_last_reading.device_id}</span> </div>
                    <div class="text-end">
                        <span class="badge ${class_warning_status} text-white py-2 px-3">${water_level}</span>
                    </div>
                </div>
 
                <div class="d-flex align-items-center text-muted small mb-3">
                    <i class="far fa-clock me-1"></i>
                    <span>${(awlr_last_reading.reading_at == null) ? '' : moment(awlr_last_reading.reading_at).locale('id').format('YYYY-MM-DD HH:mm:ss')}</span>
                </div>

                <div class="warning-bar-container mt-2">
                    ${warning_status_bar}
                </div>
            </div>
        </div>
    </div>`;
}

function getData(url) {
    return fetch(url)
        .then(response => {
            if (!response.ok) throw new Error('Network response was not ok');
            return response.json();
        });
}

function adjustPadding() {
    const footers = document.querySelectorAll('.footer');
    const tabPanes = document.querySelectorAll('.tab-pane');

    // Ensure there are corresponding footers and tab-panes
    footers.forEach((footer, index) => {
        const tabPane = tabPanes[index];
        if (footer && tabPane) {
            const footerHeight = footer.offsetHeight;
            tabPane.style.paddingBottom = `${footerHeight}px`;
        }
    });
}
